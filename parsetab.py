
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSCOS DIVIDE FLOAT INT MINUS PLUS POWER SIN SQRT TAN TIMESstatement : expressionexpression : MINUS expression %prec UMINUSexpression : expression expression PLUS\n                  | expression expression MINUS\n                  | expression expression TIMES\n                  | expression expression DIVIDE\n                  | expression expression POWERexpression : expression SQRTexpression : expression SIN\n                  | expression COS\n                  | expression TANexpression : INT\n                  | FLOAT'
    
_lr_action_items = {'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,],[3,3,3,-12,-13,13,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,],[4,4,4,-12,-13,4,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,],[5,5,5,-12,-13,5,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'$end':([1,2,4,5,7,8,9,10,11,12,13,14,15,16,],[0,-1,-12,-13,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'SQRT':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,],[7,-12,-13,7,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'SIN':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,],[8,-12,-13,8,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'COS':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,],[9,-12,-13,9,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'TAN':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,],[10,-12,-13,10,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'PLUS':([4,5,6,7,8,9,10,11,12,13,14,15,16,],[-12,-13,12,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'TIMES':([4,5,6,7,8,9,10,11,12,13,14,15,16,],[-12,-13,14,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'DIVIDE':([4,5,6,7,8,9,10,11,12,13,14,15,16,],[-12,-13,15,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),'POWER':([4,5,6,7,8,9,10,11,12,13,14,15,16,],[-12,-13,16,-8,-9,-10,-11,-2,-3,-4,-5,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,2,3,6,11,13,],[2,6,11,6,6,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','rpncalc.py',118),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','rpncalc.py',122),
  ('expression -> expression expression PLUS','expression',3,'p_expression_binop','rpncalc.py',126),
  ('expression -> expression expression MINUS','expression',3,'p_expression_binop','rpncalc.py',127),
  ('expression -> expression expression TIMES','expression',3,'p_expression_binop','rpncalc.py',128),
  ('expression -> expression expression DIVIDE','expression',3,'p_expression_binop','rpncalc.py',129),
  ('expression -> expression expression POWER','expression',3,'p_expression_binop','rpncalc.py',130),
  ('expression -> expression SQRT','expression',2,'p_expression_sqrt','rpncalc.py',138),
  ('expression -> expression SIN','expression',2,'p_expression_trig','rpncalc.py',142),
  ('expression -> expression COS','expression',2,'p_expression_trig','rpncalc.py',143),
  ('expression -> expression TAN','expression',2,'p_expression_trig','rpncalc.py',144),
  ('expression -> INT','expression',1,'p_expression_number','rpncalc.py',150),
  ('expression -> FLOAT','expression',1,'p_expression_number','rpncalc.py',151),
]
