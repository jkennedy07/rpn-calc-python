
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSABS COS DIVIDE FLOAT INT MINUS PLUS POWER SIN SQRT TAN TIMESstatement : expressionexpression : MINUS expression %prec UMINUSexpression : expression expression PLUS\n                  | expression expression MINUS\n                  | expression expression TIMES\n                  | expression expression DIVIDE\n                  | expression expression POWERexpression : expression SQRTexpression : expression ABSexpression : expression SIN\n                  | expression COS\n                  | expression TANexpression : INT\n                  | FLOAT'
    
_lr_action_items = {'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[3,3,3,-13,-14,14,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[4,4,4,-13,-14,4,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[5,5,5,-13,-14,5,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'$end':([1,2,4,5,7,8,9,10,11,12,13,14,15,16,17,],[0,-1,-13,-14,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'SQRT':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[7,-13,-14,7,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'ABS':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[8,-13,-14,8,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'SIN':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[9,-13,-14,9,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'COS':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[10,-13,-14,10,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'TAN':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[11,-13,-14,11,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'PLUS':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[-13,-14,13,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'TIMES':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[-13,-14,15,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'DIVIDE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[-13,-14,16,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),'POWER':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[-13,-14,17,-8,-9,-10,-11,-12,-2,-3,-4,-5,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,2,3,6,12,14,],[2,6,12,6,6,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','rpncalc.py',120),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','rpncalc.py',124),
  ('expression -> expression expression PLUS','expression',3,'p_expression_binop','rpncalc.py',128),
  ('expression -> expression expression MINUS','expression',3,'p_expression_binop','rpncalc.py',129),
  ('expression -> expression expression TIMES','expression',3,'p_expression_binop','rpncalc.py',130),
  ('expression -> expression expression DIVIDE','expression',3,'p_expression_binop','rpncalc.py',131),
  ('expression -> expression expression POWER','expression',3,'p_expression_binop','rpncalc.py',132),
  ('expression -> expression SQRT','expression',2,'p_expression_sqrt','rpncalc.py',140),
  ('expression -> expression ABS','expression',2,'p_expression_abs','rpncalc.py',144),
  ('expression -> expression SIN','expression',2,'p_expression_trig','rpncalc.py',148),
  ('expression -> expression COS','expression',2,'p_expression_trig','rpncalc.py',149),
  ('expression -> expression TAN','expression',2,'p_expression_trig','rpncalc.py',150),
  ('expression -> INT','expression',1,'p_expression_number','rpncalc.py',156),
  ('expression -> FLOAT','expression',1,'p_expression_number','rpncalc.py',157),
]
